[diff]
	tool = bc3

[difftool "bc3"]
	path = C:\\Program Files (x86)\\Beyond Compare 3\\bcomp.exe
#	cmd = \"c:/program files (x86)/beyond compare 3/bcomp.exe\" \"$LOCAL\" \"$REMOTE\"

[merge]
	tool = bc3

[mergetool]
	prompt = false
	keepBackup = false

[mergetool "bc3"]
	path = C:\\Program Files (x86)\\Beyond Compare 3\\bcomp.exe
#	cmd = \"c:/program files (x86)/beyond compare 3/bcomp.exe\" \"$LOCAL\" \"$REMOTE\" \"$BASE\" \"$MERGED\"
	trustExitCode = true

[alias]
	# CLI Syntax: git config --global alias.ci commit

	fam = !git checkout development && git fetch && git merge origin/development && git dm

	# Given a merge commit, find the span of commits that exist(ed) on that
	# branch. Again, not so useful in itself, but used by other aliases.
	merge-span = "!f() { echo $(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f1)$1$(git log -1 $2 --merges --pretty=format:%P | cut -d' ' -f2); }; f"

	# Find the commits that were introduced by a merge
	merge-log = "!git log `git merge-span .. $1`"
	# Show the changes that were introduced by a merge
	merge-diff = "!git diff `git merge-span ... $1`"
	# As above, but in your difftool
	merge-dt = "!git difftool `git merge-span ... $1`"
	mm = merge master


	### Status
	st = status # -u: Show all untracked files (instead of just directories)

	### Diffing
	df = diff
	df1 = diff HEAD~
	df2 = diff HEAD~~
	df3 = diff HEAD~~~
	dfw = diff --word-diff
	dfc = diff --cached # Show staged changes
	dt = difftool
	mt = mergetool

	### List stuff
	aliases = !git config --list | grep 'alias\\.' | sed 's/alias\\.\\([^=]*\\)=\\(.*\\)/\\1\\t=> \\2/' | sort

	### Tagging
	tags = tag -l
	tl = describe --tags --abbrev=0 # Print the last tag

	### Stashing
	stashes = stash list --date=relative
	sl = stash list
	ss = "!f() { git show \"stash@{$1}\"; }; f"
	sn = "!f() { git stash save \"$1\"; }; f" # sn = stash name
	snp = "!f() { git stash save -p \"$1\"; }; f"
	sp = stash pop
	sa = stash apply

	### Branching
	branches = branch -a
	br = branch
	brd = branch -d
	co = checkout
	cob = checkout -b
	cod = checkout development
	cods = checkout develop
	com = checkout master
	cot = checkout test
	cop = checkout gh-pages
	col = checkout laoujin

	### Committing & Amending
	#ci = "!f() { git commit -m"$1"; }; f"
	ci = commit
	cim = commit --no-edit # ci merge
	unci = reset --soft HEAD^
	amend = !git add -A && git commit --amend --no-edit
	ciamend = commit --amend --no-edit
	cp = cherry-pick

	# commit entire working directory. usage: git ca "commit message"
	ca = "!f() { git add -A; git commit -vm\"$1\"; }; f"
	fire = "!git ca 'FIRE FIRE FIRE' && git push origin HEAD:fire-branch -f"
	# TODO: git cat 2017.5.3 --> Commit all + create tag

	### Logging
	lg = log -p # Show commits with diff

	# View history graph with abbreviated SHA and description
	#   Add -10 to view only last 10 commits
	lbasic = log --color --abbrev-commit
	ld = !git lbasic --graph --date=iso8601 --pretty=format:'%C(magenta)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd)%C(bold blue)<%an>%Creset'
	lda = !git lbasic --date=iso8601 --author=$(git config user.name) --pretty=format:'%C(magenta)%h%Creset - %Cgreen(%cd)%Creset - %C(yellow)%d%Creset%s %C(bold blue)<%an>%Creset'
	l = !git lbasic --graph --date=relative --pretty=format:'%C(magenta)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd)%C(bold blue)<%an>%Creset'

	# View history with changed files
	ll = log --decorate --date=relative --numstat --pretty=format:'%C(magenta)%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cd)%C(bold blue)<%an>%Creset'

	### Collaborating
	sha = rev-parse HEAD
	gom = pull origin master

	# push/delete origin
	branch-name = "!git rev-parse --abbrev-ref HEAD"
	po = "!git push -u origin $(git branch-name)"
	unpo = "!git push origin :$(git branch-name)"
	pot = "!git push -u origin $(git branch-name) --tags"
	remote-del = "!f() { git push origin :$1; }; f"

	# remote mine
	# TODO: set-url: git remote set-url origin https://github.com/USERNAME/OTHERREPOSITORY.git
	remotes = remote -v
	open = !explorer `git config remote.origin.url`
	issues = !explorer `git config remote.origin.url`/issues
	mr = remote add mine
	pm = "!git push -u mine $(git branch-name)"

	# Delete merged branches but not branches called master or development
	# Sort of works in PowerShell (but best call this from development branch)
	dm = !git branch --merged | egrep -v \"(\\*| ) (development|master|develop)\" | xargs -n 1 git branch -d


	### The rest
	subm = submodule

	# Find commits by source code
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -i -S$1; }; f"
	# Find commits by commit message
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -i --grep=$1; }; f"

	# Ignore changes to a file
	# TODO: "assume" is not ideal. Compare with --skip-worktree
	# Also see: http://stackoverflow.com/questions/29549318/not-possible-to-switch-branch-after-skip-worktree
	assume = update-index --assume-unchanged
	noassume = update-index --no-assume-unchanged
	unassume = !git noassume
	assumed = "!git ls-files -v | grep ^h | cut -c 3-"

	# A loop you say?
	l1 = !git l -1
	l2 = !git l -2
	l3 = !git l -3
	l4 = !git l -4
	l5 = !git l -5
	l6 = !git l -6
	l7 = !git l -7
	l8 = !git l -8
	l9 = !git l -9
	l10 = !git l -10
	l15 = !git l -15
	l20 = !git l -20
	l25 = !git l -25
	l50 = !git l -50
	la = !git l --all
	la1 = !git l -1 --all
	la2 = !git l -2 --all
	la3 = !git l -3 --all
	la4 = !git l -4 --all
	la5 = !git l -5 --all
	la6 = !git l -6 --all
	la7 = !git l -7 --all
	la8 = !git l -8 --all
	la9 = !git l -9 --all
	la10 = !git l -10 --all
	la15 = !git l -15 --all
	la20 = !git l -20 --all
	la25 = !git l -25 --all
	la50 = !git l -50 --all

[core]
	autocrlf = true
	excludesfile = ~/.gitignore_global
	attributesfile = ~/.gitattributes_global
	pager = less -x2
#	editor = emacs
#	editor = "\"C:\\Program Files\\Sublime Text 3\\subl.exe\" -n -w"

[push]
	default = simple
	followTags = true


# Available colors: normal, black, red, green, yellow, blue, magenta, cyan, or white
# Second optional color param values: bold, dim, ul (underline), blink, and reverse (swap foreground and background)

[color "branch"]
	current = yellow
	local = white
	remote = magenta

[color "status"]
	header = white
	changed = magenta bold
	untracked = magenta bold
	unmerged = magenta reverse
	added = yellow
	branch = white

[color "diff"]
	meta = blue white
	# meta = blue reverse # for synology
	frag = normal bold
	old = magenta bold
	new = green bold

# help.autocorrect = 1
# WARNING: You called a Git command named 'chekcout', which does not exist.
# Continuing under the assumption that you meant 'checkout'

# commit.template = ~/.gitmessage.txt
# fetch.prune = true
